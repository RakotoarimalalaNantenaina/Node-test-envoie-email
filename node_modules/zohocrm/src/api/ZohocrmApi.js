(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient', '../model/Account', '../model/NotesPOST', '../model/Notes', '../model/Calls', '../model/Events', '../model/BulkLoad', '../model/BulkQuery', '../model/Campaign', '../model/Contact', '../model/Lead', '../model/Opportunity', '../model/Tasks', '../model/BulkStatus', '../model/Pong', '../model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Account'), require('../model/NotesPOST'), require('../model/Notes'), require('../model/Calls'), require('../model/Events'), require('../model/BulkLoad'), require('../model/BulkQuery'), require('../model/Campaign'), require('../model/Contact'), require('../model/Lead'), require('../model/Opportunity'), require('../model/Tasks'), require('../model/BulkStatus'), require('../model/Pong'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.Zohocrm) {
      root.Zohocrm = {};
    }
    root.Zohocrm.ZohocrmApi = factory(root.Zohocrm.ApiClient, root.Zohocrm.Account, root.Zohocrm.NotesPOST, root.Zohocrm.Notes, root.Zohocrm.Calls, root.Zohocrm.Events, root.Zohocrm.BulkLoad, root.Zohocrm.BulkQuery, root.Zohocrm.Campaign, root.Zohocrm.Contact, root.Zohocrm.Lead, root.Zohocrm.Opportunity, root.Zohocrm.Tasks, root.Zohocrm.BulkStatus, root.Zohocrm.Pong, root.Zohocrm.User);
  }
}(this, function(ApiClient, Account, NotesPOST, Notes, Calls, Events, BulkLoad, BulkQuery, Campaign, Contact, Lead, Opportunity, Tasks, BulkStatus, Pong, User) {
  'use strict';

  /**
   * Zohocrm service.
   * @module api/ZohocrmApi
   * @version api-v2
   */

  /**
   * Constructs a new ZohocrmApi. 
   * @alias module:api/ZohocrmApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use, default to {@link module:ApiClient#instance}
   * if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAccount operation.
     * @callback module:api/ZohocrmApi~createAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new account in the CRM system. Account creation will flow through Cloud Elements to your CRM service. With the exception of the &#39;ACCOUNTID&#39; field, the required fields indicated in the &#39;Account&#39; model are those required to create a new account.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {module:model/Account} body The Account object to be created.&lt;br&gt;With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Account&#39; model are those required to create a new account.
     * @param {module:api/ZohocrmApi~createAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Account}
     */
    this.createAccount = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createAccount";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createAccount";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Account;

      return this.apiClient.callApi(
        '/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccountNote operation.
     * @callback module:api/ZohocrmApi~createAccountNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a note for an account
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} accountId The account ID
     * @param {module:model/NotesPOST} notes The note
     * @param {module:api/ZohocrmApi~createAccountNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Notes}
     */
    this.createAccountNote = function(authorization, accountId, notes, callback) {
      var postBody = notes;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createAccountNote";
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling createAccountNote";
      }

      // verify the required parameter 'notes' is set
      if (notes == undefined || notes == null) {
        throw "Missing the required parameter 'notes' when calling createAccountNote";
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Notes;

      return this.apiClient.callApi(
        '/accounts/{accountId}/notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createActivitiesCall operation.
     * @callback module:api/ZohocrmApi~createActivitiesCallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Calls} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a call
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {module:model/Calls} calls The call
     * @param {module:api/ZohocrmApi~createActivitiesCallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Calls}
     */
    this.createActivitiesCall = function(authorization, calls, callback) {
      var postBody = calls;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createActivitiesCall";
      }

      // verify the required parameter 'calls' is set
      if (calls == undefined || calls == null) {
        throw "Missing the required parameter 'calls' when calling createActivitiesCall";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Calls;

      return this.apiClient.callApi(
        '/activities-calls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createActivitiesEvent operation.
     * @callback module:api/ZohocrmApi~createActivitiesEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Events} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an event
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {module:model/Events} events The event
     * @param {module:api/ZohocrmApi~createActivitiesEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Events}
     */
    this.createActivitiesEvent = function(authorization, events, callback) {
      var postBody = events;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createActivitiesEvent";
      }

      // verify the required parameter 'events' is set
      if (events == undefined || events == null) {
        throw "Missing the required parameter 'events' when calling createActivitiesEvent";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Events;

      return this.apiClient.callApi(
        '/activities-events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBulkByObjectName operation.
     * @callback module:api/ZohocrmApi~createBulkByObjectNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkLoad} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;span class&#x3D;&#39;betaAPI&#39;&gt;beta&lt;/span&gt; Upload a file of objects to be bulk uploaded to the provider.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} objectName The name of the object for which data needs to be uploaded.
     * @param {Object} opts Optional parameters
     * @param {String} opts.elementsAsyncCallbackUrl The Url to send the notification to when the Job is completed
     * @param {String} opts.identifierFieldName The name of the field, which will be used as the ID field for determine inserts v/s updates during the bulk load process.
     * @param {File} opts.file The file of objects to bulk load.
     * @param {module:api/ZohocrmApi~createBulkByObjectNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/BulkLoad}
     */
    this.createBulkByObjectName = function(authorization, objectName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createBulkByObjectName";
      }

      // verify the required parameter 'objectName' is set
      if (objectName == undefined || objectName == null) {
        throw "Missing the required parameter 'objectName' when calling createBulkByObjectName";
      }


      var pathParams = {
        'objectName': objectName
      };
      var queryParams = {
        'identifierFieldName': opts['identifierFieldName']
      };
      var headerParams = {
        'Authorization': authorization,
        'Elements-Async-Callback-Url': opts['elementsAsyncCallbackUrl']
      };
      var formParams = {
        'file': opts['file']
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = [];
      var returnType = BulkLoad;

      return this.apiClient.callApi(
        '/bulk/{objectName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBulkQuery operation.
     * @callback module:api/ZohocrmApi~createBulkQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;span class&#x3D;&#39;betaAPI&#39;&gt;beta&lt;/span&gt; Create an asynchronous bulk query job.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} q The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.
     * @param {Object} opts Optional parameters
     * @param {String} opts.elementsAsyncCallbackUrl The Url to send the notification to when the Job is completed
     * @param {String} opts.lastRunDate The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. &#39;2014-10-06T13:22:17-08:00&#39;
     * @param {String} opts.from The created/updated date of the object to filter on - optional eg. &#39;2014-10-06T13:22:17-08:00&#39;
     * @param {String} opts.to The created/updated date of the object to filter on - optional eg. &#39;2014-10-06T13:22:17-08:00&#39;
     * @param {Number} opts.continueFromJobId If this id is supplied the previous job will be continued from where it left off and continue to get all records to the time the new job was started. If this value is passed in - the query parameter is ignored
     * @param {module:api/ZohocrmApi~createBulkQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/BulkQuery}
     */
    this.createBulkQuery = function(authorization, q, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createBulkQuery";
      }

      // verify the required parameter 'q' is set
      if (q == undefined || q == null) {
        throw "Missing the required parameter 'q' when calling createBulkQuery";
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
        'lastRunDate': opts['lastRunDate'],
        'from': opts['from'],
        'to': opts['to'],
        'continueFromJobId': opts['continueFromJobId']
      };
      var headerParams = {
        'Authorization': authorization,
        'Elements-Async-Callback-Url': opts['elementsAsyncCallbackUrl']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = BulkQuery;

      return this.apiClient.callApi(
        '/bulk/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createByObjectName operation.
     * @callback module:api/ZohocrmApi~createByObjectNameCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new object in the CRM system. The provided objectName can be that of a custom or standard object. Object creation will flow through Cloud Elements to your CRM service.  
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} objectName The object name of the object to be created, e.g., &#39;account&#39;.
     * @param {Object} body The object to be created.
     * @param {module:api/ZohocrmApi~createByObjectNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Object}
     */
    this.createByObjectName = function(authorization, objectName, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createByObjectName";
      }

      // verify the required parameter 'objectName' is set
      if (objectName == undefined || objectName == null) {
        throw "Missing the required parameter 'objectName' when calling createByObjectName";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createByObjectName";
      }


      var pathParams = {
        'objectName': objectName
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/{objectName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCampaign operation.
     * @callback module:api/ZohocrmApi~createCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new campaign in the CRM system. Campaign creation will flow through Cloud Elements to your CRM service. With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Campaign&#39; model are those required to create a new campaign.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {module:model/Campaign} body The Campaign object to be created.&lt;br&gt;With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Contact&#39; model are those required to create a new campaign.
     * @param {module:api/ZohocrmApi~createCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Campaign}
     */
    this.createCampaign = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createCampaign";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createCampaign";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Campaign;

      return this.apiClient.callApi(
        '/campaigns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createContact operation.
     * @callback module:api/ZohocrmApi~createContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new contact in the CRM system. Contact creation will flow through Cloud Elements to your CRM service. With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Contact&#39; model are those required to create a new contact.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {module:model/Contact} body The Contact object to be created.&lt;br&gt;With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Contact&#39; model are those required to create a new contact.
     * @param {module:api/ZohocrmApi~createContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Contact}
     */
    this.createContact = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createContact";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createContact";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Contact;

      return this.apiClient.callApi(
        '/contacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createContactNote operation.
     * @callback module:api/ZohocrmApi~createContactNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a note for a contact
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} contactId The contact ID
     * @param {module:model/NotesPOST} notes The note
     * @param {module:api/ZohocrmApi~createContactNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Notes}
     */
    this.createContactNote = function(authorization, contactId, notes, callback) {
      var postBody = notes;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createContactNote";
      }

      // verify the required parameter 'contactId' is set
      if (contactId == undefined || contactId == null) {
        throw "Missing the required parameter 'contactId' when calling createContactNote";
      }

      // verify the required parameter 'notes' is set
      if (notes == undefined || notes == null) {
        throw "Missing the required parameter 'notes' when calling createContactNote";
      }


      var pathParams = {
        'contactId': contactId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Notes;

      return this.apiClient.callApi(
        '/contacts/{contactId}/notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createLead operation.
     * @callback module:api/ZohocrmApi~createLeadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Lead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new lead in the CRM system. Lead creation will flow through Cloud Elements to your CRM service. With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Lead&#39; model are those required to create a new lead.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {module:model/Lead} body The Lead object to be created.&lt;br&gt;With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Lead&#39; model are those required to create a new lead.
     * @param {module:api/ZohocrmApi~createLeadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Lead}
     */
    this.createLead = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createLead";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createLead";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Lead;

      return this.apiClient.callApi(
        '/leads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createLeadNote operation.
     * @callback module:api/ZohocrmApi~createLeadNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a note for a lead
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} leadId The lead ID
     * @param {module:model/NotesPOST} notes The note
     * @param {module:api/ZohocrmApi~createLeadNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Notes}
     */
    this.createLeadNote = function(authorization, leadId, notes, callback) {
      var postBody = notes;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createLeadNote";
      }

      // verify the required parameter 'leadId' is set
      if (leadId == undefined || leadId == null) {
        throw "Missing the required parameter 'leadId' when calling createLeadNote";
      }

      // verify the required parameter 'notes' is set
      if (notes == undefined || notes == null) {
        throw "Missing the required parameter 'notes' when calling createLeadNote";
      }


      var pathParams = {
        'leadId': leadId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Notes;

      return this.apiClient.callApi(
        '/leads/{leadId}/notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOpportunit operation.
     * @callback module:api/ZohocrmApi~createOpportunitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Opportunity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new opportunity in the CRM system. Opportunity creation will flow through Cloud Elements to your CRM service. With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Opportunity&#39; model are those required to create a new opportunity.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {module:model/Opportunity} body The Opportunity object to be created.&lt;br&gt;With the exception of the &#39;id&#39; field, the required fields indicated in the &#39;Opportunity&#39; model are those required to create a new opportunity.
     * @param {module:api/ZohocrmApi~createOpportunitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Opportunity}
     */
    this.createOpportunit = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createOpportunit";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling createOpportunit";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Opportunity;

      return this.apiClient.callApi(
        '/opportunities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOpportunitNote operation.
     * @callback module:api/ZohocrmApi~createOpportunitNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a note for an opportunity
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} opportunityId The opportunity ID
     * @param {module:model/NotesPOST} notes The note
     * @param {module:api/ZohocrmApi~createOpportunitNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Notes}
     */
    this.createOpportunitNote = function(authorization, opportunityId, notes, callback) {
      var postBody = notes;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createOpportunitNote";
      }

      // verify the required parameter 'opportunityId' is set
      if (opportunityId == undefined || opportunityId == null) {
        throw "Missing the required parameter 'opportunityId' when calling createOpportunitNote";
      }

      // verify the required parameter 'notes' is set
      if (notes == undefined || notes == null) {
        throw "Missing the required parameter 'notes' when calling createOpportunitNote";
      }


      var pathParams = {
        'opportunityId': opportunityId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Notes;

      return this.apiClient.callApi(
        '/opportunities/{opportunityId}/notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTask operation.
     * @callback module:api/ZohocrmApi~createTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tasks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a task
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {module:model/Tasks} tasks The task
     * @param {module:api/ZohocrmApi~createTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Tasks}
     */
    this.createTask = function(authorization, tasks, callback) {
      var postBody = tasks;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling createTask";
      }

      // verify the required parameter 'tasks' is set
      if (tasks == undefined || tasks == null) {
        throw "Missing the required parameter 'tasks' when calling createTask";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Tasks;

      return this.apiClient.callApi(
        '/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountById operation.
     * @callback module:api/ZohocrmApi~deleteAccountByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account associated with a given ACCOUNTID from your CRM system.\nSpecifying an account associated with a given ACCOUNTID that does not exist will result in an error message.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the account to delete from the CRM system.
     * @param {module:api/ZohocrmApi~deleteAccountByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountById = function(authorization, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling deleteAccountById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteAccountById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountsNoteByNoteId operation.
     * @callback module:api/ZohocrmApi~deleteAccountsNoteByNoteIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a note for an account
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} accountId The account ID
     * @param {String} noteId The note ID
     * @param {module:api/ZohocrmApi~deleteAccountsNoteByNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountsNoteByNoteId = function(authorization, accountId, noteId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling deleteAccountsNoteByNoteId";
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling deleteAccountsNoteByNoteId";
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw "Missing the required parameter 'noteId' when calling deleteAccountsNoteByNoteId";
      }


      var pathParams = {
        'accountId': accountId,
        'noteId': noteId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts/{accountId}/notes/{noteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteActivitiesCallByCallId operation.
     * @callback module:api/ZohocrmApi~deleteActivitiesCallByCallIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a call
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} callId The call ID
     * @param {module:api/ZohocrmApi~deleteActivitiesCallByCallIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteActivitiesCallByCallId = function(authorization, callId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling deleteActivitiesCallByCallId";
      }

      // verify the required parameter 'callId' is set
      if (callId == undefined || callId == null) {
        throw "Missing the required parameter 'callId' when calling deleteActivitiesCallByCallId";
      }


      var pathParams = {
        'callId': callId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/activities-calls/{callId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteActivitiesEventByEventId operation.
     * @callback module:api/ZohocrmApi~deleteActivitiesEventByEventIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an event
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} eventId The event ID
     * @param {module:api/ZohocrmApi~deleteActivitiesEventByEventIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteActivitiesEventByEventId = function(authorization, eventId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling deleteActivitiesEventByEventId";
      }

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw "Missing the required parameter 'eventId' when calling deleteActivitiesEventByEventId";
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/activities-events/{eventId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteById operation.
     * @callback module:api/ZohocrmApi~deleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an object associated with a given object name and ID from the CRM system.  Specifying an object associated with a given objectName and ID that does not exist will result in an error message.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} objectName The object name of the object to be deleted, e.g., &#39;account&#39;.
     * @param {String} id The ID of the object to delete from the CRM system.
     * @param {module:api/ZohocrmApi~deleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteById = function(authorization, objectName, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling deleteById";
      }

      // verify the required parameter 'objectName' is set
      if (objectName == undefined || objectName == null) {
        throw "Missing the required parameter 'objectName' when calling deleteById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteById";
      }


      var pathParams = {
        'objectName': objectName,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/{objectName}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCampaignById operation.
     * @callback module:api/ZohocrmApi~deleteCampaignByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a campaign associated with a given CAMPAIGNID from your CRM system.\nSpecifying a contact associated with a given CAMPAIGNID that does not exist will result in an error message. .
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the campaign to delete from the CRM system.
     * @param {module:api/ZohocrmApi~deleteCampaignByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCampaignById = function(authorization, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling deleteCampaignById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteCampaignById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/campaigns/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContactById operation.
     * @callback module:api/ZohocrmApi~deleteContactByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a contact associated with a given CONTACTID from your CRM system.\nSpecifying a contact associated with a given CONTACTID that does not exist will result in an error message. .
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the contact to delete from the CRM system.
     * @param {module:api/ZohocrmApi~deleteContactByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteContactById = function(authorization, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling deleteContactById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteContactById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContactsNoteByNoteId operation.
     * @callback module:api/ZohocrmApi~deleteContactsNoteByNoteIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a note for a contact
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} contactId The contact ID
     * @param {String} noteId The note ID
     * @param {module:api/ZohocrmApi~deleteContactsNoteByNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteContactsNoteByNoteId = function(authorization, contactId, noteId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling deleteContactsNoteByNoteId";
      }

      // verify the required parameter 'contactId' is set
      if (contactId == undefined || contactId == null) {
        throw "Missing the required parameter 'contactId' when calling deleteContactsNoteByNoteId";
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw "Missing the required parameter 'noteId' when calling deleteContactsNoteByNoteId";
      }


      var pathParams = {
        'contactId': contactId,
        'noteId': noteId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/contacts/{contactId}/notes/{noteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLeadById operation.
     * @callback module:api/ZohocrmApi~deleteLeadByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a lead associated with a given LEADID from the CRM system.  Specifying a leadassociated with a given LEADID that does not exist will result in an error message. \n
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the lead to delete from the CRM system.
     * @param {module:api/ZohocrmApi~deleteLeadByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLeadById = function(authorization, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling deleteLeadById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteLeadById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/leads/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLeadsNoteByNoteId operation.
     * @callback module:api/ZohocrmApi~deleteLeadsNoteByNoteIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a note for a lead
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} leadId The lead ID
     * @param {String} noteId The note ID
     * @param {module:api/ZohocrmApi~deleteLeadsNoteByNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLeadsNoteByNoteId = function(authorization, leadId, noteId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling deleteLeadsNoteByNoteId";
      }

      // verify the required parameter 'leadId' is set
      if (leadId == undefined || leadId == null) {
        throw "Missing the required parameter 'leadId' when calling deleteLeadsNoteByNoteId";
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw "Missing the required parameter 'noteId' when calling deleteLeadsNoteByNoteId";
      }


      var pathParams = {
        'leadId': leadId,
        'noteId': noteId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/leads/{leadId}/notes/{noteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOpportunitById operation.
     * @callback module:api/ZohocrmApi~deleteOpportunitByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an opportunity associated with a given POTENTIALID from the CRM system.  Specifying an opportunity associated with a given POTENTIALID that does not exist will result in an error message.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the opportunity to delete from the CRM system.
     * @param {module:api/ZohocrmApi~deleteOpportunitByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOpportunitById = function(authorization, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling deleteOpportunitById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteOpportunitById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/opportunities/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOpportunitiesNoteByNoteId operation.
     * @callback module:api/ZohocrmApi~deleteOpportunitiesNoteByNoteIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a note for an opportunity
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} opportunityId The opportunity ID
     * @param {String} noteId The note ID
     * @param {module:api/ZohocrmApi~deleteOpportunitiesNoteByNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOpportunitiesNoteByNoteId = function(authorization, opportunityId, noteId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling deleteOpportunitiesNoteByNoteId";
      }

      // verify the required parameter 'opportunityId' is set
      if (opportunityId == undefined || opportunityId == null) {
        throw "Missing the required parameter 'opportunityId' when calling deleteOpportunitiesNoteByNoteId";
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw "Missing the required parameter 'noteId' when calling deleteOpportunitiesNoteByNoteId";
      }


      var pathParams = {
        'opportunityId': opportunityId,
        'noteId': noteId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/opportunities/{opportunityId}/notes/{noteId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaskByTaskId operation.
     * @callback module:api/ZohocrmApi~deleteTaskByTaskIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a task
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} taskId The task ID
     * @param {module:api/ZohocrmApi~deleteTaskByTaskIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTaskByTaskId = function(authorization, taskId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling deleteTaskByTaskId";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling deleteTaskByTaskId";
      }


      var pathParams = {
        'taskId': taskId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/tasks/{taskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountById operation.
     * @callback module:api/ZohocrmApi~getAccountByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an account associated with a given ACCOUNTID from the CRM system.Specifying an account with a specified ACCOUNTID that does not exist will result in an error response.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the account to retrieve from the CRM system.
     * @param {module:api/ZohocrmApi~getAccountByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Account}
     */
    this.getAccountById = function(authorization, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getAccountById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getAccountById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Account;

      return this.apiClient.callApi(
        '/accounts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccounts operation.
     * @callback module:api/ZohocrmApi~getAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find accounts in the CRM system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all accounts whose name contains the word &#39;data&#39;, the search expression parameter will be &lt;i&gt;where&#x3D;name like &#39;%data%&#39;&lt;/i&gt;. If a search expression is not provided, then the first 200 records will be returned. &lt;p&gt;If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after &#39;Jan 15, 2014&#39;, the search expression will be &lt;i&gt;where&#x3D;lastModifiedDate&gt;&#x3D;&#39;2014-01-15T00:00:00.000Z&#39;&lt;/i&gt;. When this parameter is omitted, all accounts are returned in a paginated fashion.
     * @param {Boolean} opts.includeDeleted Specify if deleted accounts should be included in the search.
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Account>}
     */
    this.getAccounts = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getAccounts";
      }


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where'],
        'includeDeleted': opts['includeDeleted'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Account];

      return this.apiClient.callApi(
        '/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountsNoteByNoteId operation.
     * @callback module:api/ZohocrmApi~getAccountsNoteByNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a note for an account
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} accountId The account ID
     * @param {String} noteId The note ID
     * @param {module:api/ZohocrmApi~getAccountsNoteByNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Notes}
     */
    this.getAccountsNoteByNoteId = function(authorization, accountId, noteId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getAccountsNoteByNoteId";
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling getAccountsNoteByNoteId";
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw "Missing the required parameter 'noteId' when calling getAccountsNoteByNoteId";
      }


      var pathParams = {
        'accountId': accountId,
        'noteId': noteId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Notes;

      return this.apiClient.callApi(
        '/accounts/{accountId}/notes/{noteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountsNotes operation.
     * @callback module:api/ZohocrmApi~getAccountsNotesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Notes>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List notes for an account
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} accountId The account ID
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getAccountsNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Notes>}
     */
    this.getAccountsNotes = function(authorization, accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getAccountsNotes";
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling getAccountsNotes";
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Notes];

      return this.apiClient.callApi(
        '/accounts/{accountId}/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getActivitiesCallByCallId operation.
     * @callback module:api/ZohocrmApi~getActivitiesCallByCallIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Calls} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a call
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} callId The call ID
     * @param {module:api/ZohocrmApi~getActivitiesCallByCallIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Calls}
     */
    this.getActivitiesCallByCallId = function(authorization, callId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getActivitiesCallByCallId";
      }

      // verify the required parameter 'callId' is set
      if (callId == undefined || callId == null) {
        throw "Missing the required parameter 'callId' when calling getActivitiesCallByCallId";
      }


      var pathParams = {
        'callId': callId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Calls;

      return this.apiClient.callApi(
        '/activities-calls/{callId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getActivitiesCalls operation.
     * @callback module:api/ZohocrmApi~getActivitiesCallsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Calls>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for calls
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for calls last modified on or after &#39;Jan 15, 2014&#39;, the search expression will be &lt;i&gt;where&#x3D;lastModifiedDate&gt;&#x3D;&#39;2014-01-15T00:00:00.000Z&#39;&lt;/i&gt;. When this parameter is omitted, all calls are returned in a paginated fashion.
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getActivitiesCallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Calls>}
     */
    this.getActivitiesCalls = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getActivitiesCalls";
      }


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Calls];

      return this.apiClient.callApi(
        '/activities-calls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getActivitiesEventByEventId operation.
     * @callback module:api/ZohocrmApi~getActivitiesEventByEventIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Events} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an event
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} eventId The event ID
     * @param {module:api/ZohocrmApi~getActivitiesEventByEventIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Events}
     */
    this.getActivitiesEventByEventId = function(authorization, eventId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getActivitiesEventByEventId";
      }

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw "Missing the required parameter 'eventId' when calling getActivitiesEventByEventId";
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Events;

      return this.apiClient.callApi(
        '/activities-events/{eventId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getActivitiesEvents operation.
     * @callback module:api/ZohocrmApi~getActivitiesEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Events>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for events
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for events last modified on or after &#39;Jan 15, 2014&#39;, the search expression will be &lt;i&gt;where&#x3D;lastModifiedDate&gt;&#x3D;&#39;2014-01-15T00:00:00.000Z&#39;&lt;/i&gt;. When this parameter is omitted, all events are returned in a paginated fashion.
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getActivitiesEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Events>}
     */
    this.getActivitiesEvents = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getActivitiesEvents";
      }


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Events];

      return this.apiClient.callApi(
        '/activities-events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBulkByObjectName operation.
     * @callback module:api/ZohocrmApi~getBulkByObjectNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;span class&#x3D;&#39;betaAPI&#39;&gt;beta&lt;/span&gt; Retrieve the results of an asynchronous bulk query.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the bulk job
     * @param {String} objectName The name of the object
     * @param {module:api/ZohocrmApi~getBulkByObjectNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {File}
     */
    this.getBulkByObjectName = function(authorization, id, objectName, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getBulkByObjectName";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getBulkByObjectName";
      }

      // verify the required parameter 'objectName' is set
      if (objectName == undefined || objectName == null) {
        throw "Missing the required parameter 'objectName' when calling getBulkByObjectName";
      }


      var pathParams = {
        'id': id,
        'objectName': objectName
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/csv', 'application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/bulk/{id}/{objectName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBulkStatus operation.
     * @callback module:api/ZohocrmApi~getBulkStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &lt;span class&#x3D;&#39;betaAPI&#39;&gt;beta&lt;/span&gt; Retrieve the status of a bulk job.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the bulk job to retrieve its status.
     * @param {module:api/ZohocrmApi~getBulkStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/BulkStatus}
     */
    this.getBulkStatus = function(authorization, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getBulkStatus";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getBulkStatus";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = BulkStatus;

      return this.apiClient.callApi(
        '/bulk/{id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getById operation.
     * @callback module:api/ZohocrmApi~getByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an object associated with a given ID from the CRM system.Specifying an object with a specified ID that does not exist will result in an error response.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} objectName The object name of the object to be retrieved, e.g., account&#39;.
     * @param {String} id The ID of the object to retrieve from the CRM system.
     * @param {module:api/ZohocrmApi~getByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Object}
     */
    this.getById = function(authorization, objectName, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getById";
      }

      // verify the required parameter 'objectName' is set
      if (objectName == undefined || objectName == null) {
        throw "Missing the required parameter 'objectName' when calling getById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getById";
      }


      var pathParams = {
        'objectName': objectName,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/{objectName}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByObjectName operation.
     * @callback module:api/ZohocrmApi~getByObjectNameCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find objects in the CRM system, using the provided object name and CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all contacts whose name contains the word &#39;data&#39;, the search expression parameter will be &lt;i&gt;where&#x3D;name like &#39;%data%&#39;&lt;/i&gt;. If a search expression is not provided, then the first 200 records will be returned. &lt;p&gt;If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} objectName The object name of the object to search, e.g., &#39;account&#39;.
     * @param {Object} opts Optional parameters
     * @param {String} opts.where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for objects that were last modified on or after &#39;Jan 15, 2014&#39;, the search expression will be &lt;i&gt;where&#x3D;lastModifiedDate&gt;&#x3D;&#39;2014-01-15T00:00:00.000Z&#39;&lt;/i&gt;. When this parameter is omitted, all objects of the given type are returned in a paginated fashion.
     * @param {Boolean} opts.includeDeleted Specify if deleted objects should be included in the search.
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getByObjectNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<Object>}
     */
    this.getByObjectName = function(authorization, objectName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getByObjectName";
      }

      // verify the required parameter 'objectName' is set
      if (objectName == undefined || objectName == null) {
        throw "Missing the required parameter 'objectName' when calling getByObjectName";
      }


      var pathParams = {
        'objectName': objectName
      };
      var queryParams = {
        'where': opts['where'],
        'includeDeleted': opts['includeDeleted'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/{objectName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignById operation.
     * @callback module:api/ZohocrmApi~getCampaignByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a campaign associated with a given CAMPAIGNID from the CRM system.Specifying a contact with a specified CAMPAIGNID that does not exist will result in an error response.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the campaign to retrieve from the CRM system.
     * @param {module:api/ZohocrmApi~getCampaignByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Campaign}
     */
    this.getCampaignById = function(authorization, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getCampaignById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getCampaignById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Campaign;

      return this.apiClient.callApi(
        '/campaigns/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaigns operation.
     * @callback module:api/ZohocrmApi~getCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Campaign>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find campaigns in the CRM system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all contacts whose name contains the word &#39;jones&#39;, the search expression parameter will be &lt;i&gt;where&#x3D;name&#x3D;&#39;%jones%&#39;&lt;/i&gt;. If a search expression is not provided, then the first 200 records will be returned. &lt;p&gt;If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for contacts last modified on or after &#39;Jan 15, 2014&#39;, the search expression will be &lt;i&gt;where&#x3D;lastModifiedDate&gt;&#x3D;&#39;2014-01-15T00:00:00.000Z&#39;&lt;/i&gt;. When this parameter is omitted, all contacts are returned in a paginated fashion.
     * @param {Boolean} opts.includeDeleted Specify if deleted contacts should be included in the search.
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Campaign>}
     */
    this.getCampaigns = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getCampaigns";
      }


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where'],
        'includeDeleted': opts['includeDeleted'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Campaign];

      return this.apiClient.callApi(
        '/campaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactById operation.
     * @callback module:api/ZohocrmApi~getContactByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a contact associated with a given CONTACTID from the CRM system.Specifying a contact with a specified CONTACTID that does not exist will result in an error response.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the contact to retrieve from the CRM system.
     * @param {module:api/ZohocrmApi~getContactByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Contact}
     */
    this.getContactById = function(authorization, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getContactById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getContactById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Contact;

      return this.apiClient.callApi(
        '/contacts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContacts operation.
     * @callback module:api/ZohocrmApi~getContactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Contact>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find contacts in the CRM system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all contacts whose name contains the word &#39;jones&#39;, the search expression parameter will be &lt;i&gt;where&#x3D;name&#x3D;&#39;%jones%&#39;&lt;/i&gt;. If a search expression is not provided, then the first 200 records will be returned. &lt;p&gt;If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for contacts last modified on or after &#39;Jan 15, 2014&#39;, the search expression will be &lt;i&gt;where&#x3D;lastModifiedDate&gt;&#x3D;&#39;2014-01-15T00:00:00.000Z&#39;&lt;/i&gt;. When this parameter is omitted, all contacts are returned in a paginated fashion.
     * @param {Boolean} opts.includeDeleted Specify if deleted contacts should be included in the search.
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Contact>}
     */
    this.getContacts = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getContacts";
      }


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where'],
        'includeDeleted': opts['includeDeleted'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Contact];

      return this.apiClient.callApi(
        '/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactsNoteByNoteId operation.
     * @callback module:api/ZohocrmApi~getContactsNoteByNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a note for a contact
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} contactId The contact ID
     * @param {String} noteId The note ID
     * @param {module:api/ZohocrmApi~getContactsNoteByNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Notes}
     */
    this.getContactsNoteByNoteId = function(authorization, contactId, noteId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getContactsNoteByNoteId";
      }

      // verify the required parameter 'contactId' is set
      if (contactId == undefined || contactId == null) {
        throw "Missing the required parameter 'contactId' when calling getContactsNoteByNoteId";
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw "Missing the required parameter 'noteId' when calling getContactsNoteByNoteId";
      }


      var pathParams = {
        'contactId': contactId,
        'noteId': noteId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Notes;

      return this.apiClient.callApi(
        '/contacts/{contactId}/notes/{noteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactsNotes operation.
     * @callback module:api/ZohocrmApi~getContactsNotesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Notes>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List notes for a contact
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} contactId The contact ID
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getContactsNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Notes>}
     */
    this.getContactsNotes = function(authorization, contactId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getContactsNotes";
      }

      // verify the required parameter 'contactId' is set
      if (contactId == undefined || contactId == null) {
        throw "Missing the required parameter 'contactId' when calling getContactsNotes";
      }


      var pathParams = {
        'contactId': contactId
      };
      var queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Notes];

      return this.apiClient.callApi(
        '/contacts/{contactId}/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeadById operation.
     * @callback module:api/ZohocrmApi~getLeadByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Lead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a lead associated with a given LEADID from the CRM system.Specifying a lead with a specified LEADID that does not exist will result in an errorresponse.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the lead to retrieve from the CRM system.
     * @param {module:api/ZohocrmApi~getLeadByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Lead}
     */
    this.getLeadById = function(authorization, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getLeadById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getLeadById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Lead;

      return this.apiClient.callApi(
        '/leads/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeads operation.
     * @callback module:api/ZohocrmApi~getLeadsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Lead>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find leads in the CRM system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all leads whose name contains the word &#39;data&#39;, the search expression parameter will be &lt;i&gt;where&#x3D;name like &#39;%data%&#39;&lt;/i&gt;. If a search expression is not provided, then the first 200 records will be returned. &lt;p&gt;If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for leads last modified on or after &#39;Jan 15, 2014&#39;, the search expression will be &lt;i&gt;where&#x3D;lastModifiedDate&gt;&#x3D;&#39;2014-01-15T00:00:00.000Z&#39;&lt;/i&gt;. When this parameter is omitted, all leads are returned in a paginated fashion.
     * @param {Boolean} opts.includeDeleted Specify if deleted leads should be included in the search.
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getLeadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Lead>}
     */
    this.getLeads = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getLeads";
      }


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where'],
        'includeDeleted': opts['includeDeleted'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Lead];

      return this.apiClient.callApi(
        '/leads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeadsNoteByNoteId operation.
     * @callback module:api/ZohocrmApi~getLeadsNoteByNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a note for a lead
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} leadId The lead ID
     * @param {String} noteId The note ID
     * @param {module:api/ZohocrmApi~getLeadsNoteByNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Notes}
     */
    this.getLeadsNoteByNoteId = function(authorization, leadId, noteId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getLeadsNoteByNoteId";
      }

      // verify the required parameter 'leadId' is set
      if (leadId == undefined || leadId == null) {
        throw "Missing the required parameter 'leadId' when calling getLeadsNoteByNoteId";
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw "Missing the required parameter 'noteId' when calling getLeadsNoteByNoteId";
      }


      var pathParams = {
        'leadId': leadId,
        'noteId': noteId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Notes;

      return this.apiClient.callApi(
        '/leads/{leadId}/notes/{noteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeadsNotes operation.
     * @callback module:api/ZohocrmApi~getLeadsNotesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Notes>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List notes for a lead
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} leadId The lead ID
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getLeadsNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Notes>}
     */
    this.getLeadsNotes = function(authorization, leadId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getLeadsNotes";
      }

      // verify the required parameter 'leadId' is set
      if (leadId == undefined || leadId == null) {
        throw "Missing the required parameter 'leadId' when calling getLeadsNotes";
      }


      var pathParams = {
        'leadId': leadId
      };
      var queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Notes];

      return this.apiClient.callApi(
        '/leads/{leadId}/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjects operation.
     * @callback module:api/ZohocrmApi~getObjectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all the available objects.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {module:api/ZohocrmApi~getObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getObjects = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getObjects";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/objects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectsMetadata operation.
     * @callback module:api/ZohocrmApi~getObjectsMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all the field for an object.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} objectName The name of the object
     * @param {module:api/ZohocrmApi~getObjectsMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getObjectsMetadata = function(authorization, objectName, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getObjectsMetadata";
      }

      // verify the required parameter 'objectName' is set
      if (objectName == undefined || objectName == null) {
        throw "Missing the required parameter 'objectName' when calling getObjectsMetadata";
      }


      var pathParams = {
        'objectName': objectName
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/objects/{objectName}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOpportunitById operation.
     * @callback module:api/ZohocrmApi~getOpportunitByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Opportunity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an opportunity associated with a given POTENTIALID from the CRM system.Specifying an opportunity with a specified POTENTIALID that does not exist will result in an error response.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the opportunity to retrieve from the CRM system.
     * @param {module:api/ZohocrmApi~getOpportunitByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Opportunity}
     */
    this.getOpportunitById = function(authorization, id, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getOpportunitById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getOpportunitById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Opportunity;

      return this.apiClient.callApi(
        '/opportunities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOpportunities operation.
     * @callback module:api/ZohocrmApi~getOpportunitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Opportunity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find opportunities in the CRM system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all opportunities whose name contains the word &#39;data&#39;, the search expression parameter will be &lt;i&gt;where&#x3D;name like &#39;%data%&#39;&lt;/i&gt;. If a search expression is not provided, then the first 200 records will be returned. &lt;p&gt;If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for opportunities last modified on or after &#39;Jan 15, 2014&#39;, the search expression will be &lt;i&gt;where&#x3D;lastModifiedDate&gt;&#x3D;&#39;2014-01-15T00:00:00.000Z&#39;&lt;/i&gt;. When this parameter is omitted, all opportunities are returned in a paginated fashion.
     * @param {Boolean} opts.includeDeleted Specify if deleted opportunities should be included in the search.
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getOpportunitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Opportunity>}
     */
    this.getOpportunities = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getOpportunities";
      }


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where'],
        'includeDeleted': opts['includeDeleted'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Opportunity];

      return this.apiClient.callApi(
        '/opportunities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOpportunitiesNoteByNoteId operation.
     * @callback module:api/ZohocrmApi~getOpportunitiesNoteByNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a note for an opportunity
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} opportunityId The opportunity ID
     * @param {String} noteId The note ID
     * @param {module:api/ZohocrmApi~getOpportunitiesNoteByNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Notes}
     */
    this.getOpportunitiesNoteByNoteId = function(authorization, opportunityId, noteId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getOpportunitiesNoteByNoteId";
      }

      // verify the required parameter 'opportunityId' is set
      if (opportunityId == undefined || opportunityId == null) {
        throw "Missing the required parameter 'opportunityId' when calling getOpportunitiesNoteByNoteId";
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw "Missing the required parameter 'noteId' when calling getOpportunitiesNoteByNoteId";
      }


      var pathParams = {
        'opportunityId': opportunityId,
        'noteId': noteId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Notes;

      return this.apiClient.callApi(
        '/opportunities/{opportunityId}/notes/{noteId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOpportunitiesNotes operation.
     * @callback module:api/ZohocrmApi~getOpportunitiesNotesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Notes>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List notes for an opportunity
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} opportunityId The opportunity ID
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getOpportunitiesNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Notes>}
     */
    this.getOpportunitiesNotes = function(authorization, opportunityId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getOpportunitiesNotes";
      }

      // verify the required parameter 'opportunityId' is set
      if (opportunityId == undefined || opportunityId == null) {
        throw "Missing the required parameter 'opportunityId' when calling getOpportunitiesNotes";
      }


      var pathParams = {
        'opportunityId': opportunityId
      };
      var queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Notes];

      return this.apiClient.callApi(
        '/opportunities/{opportunityId}/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPing operation.
     * @callback module:api/ZohocrmApi~getPingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pong} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {module:api/ZohocrmApi~getPingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Pong}
     */
    this.getPing = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getPing";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Pong;

      return this.apiClient.callApi(
        '/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskByTaskId operation.
     * @callback module:api/ZohocrmApi~getTaskByTaskIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tasks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a task
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} taskId The task ID
     * @param {module:api/ZohocrmApi~getTaskByTaskIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Tasks}
     */
    this.getTaskByTaskId = function(authorization, taskId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getTaskByTaskId";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling getTaskByTaskId";
      }


      var pathParams = {
        'taskId': taskId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Tasks;

      return this.apiClient.callApi(
        '/tasks/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTasks operation.
     * @callback module:api/ZohocrmApi~getTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tasks>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for tasks
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for tasks last modified on or after &#39;Jan 15, 2014&#39;, the search expression will be &lt;i&gt;where&#x3D;lastModifiedDate&gt;&#x3D;&#39;2014-01-15T00:00:00.000Z&#39;&lt;/i&gt;. When this parameter is omitted, all tasks are returned in a paginated fashion.
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Tasks>}
     */
    this.getTasks = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getTasks";
      }


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [Tasks];

      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/ZohocrmApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find users in the CRM system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword. For example, to search for all users whose name contains the word &#39;smith&#39;, the search expression parameter will be &lt;i&gt;where&#x3D;name&#x3D;&#39;%smith%&#39;&lt;/i&gt;. If a search expression is not provided, then the first 200 records will be returned. &lt;p&gt;If a value of true is specified for the includeDeleted flag, then any soft-deleted records will also be considered in the searched records.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.where The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for users last modified on or after &#39;Jan 15, 2014&#39;,the search expression will be &lt;i&gt;where&#x3D;lastModifiedDate&gt;&#x3D;&#39;2014-01-15T00:00:00.000Z&#39;&lt;/i&gt;. When this parameter is omitted, all users are returned in a paginated fashion.
     * @param {Boolean} opts.includeDeleted Specify if deleted users should be included in the search.
     * @param {Integer} opts.page The start page for pagination, which defaults to 1 if not supplied
     * @param {Integer} opts.pageSize The page size for pagination, which defaults to 200 if not supplied
     * @param {module:api/ZohocrmApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/User>}
     */
    this.getUsers = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling getUsers";
      }


      var pathParams = {
      };
      var queryParams = {
        'where': opts['where'],
        'includeDeleted': opts['includeDeleted'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [User];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountById operation.
     * @callback module:api/ZohocrmApi~updateAccountByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account associated with a given ACCOUNTID in the CRM system. The update API uses the PATCH HTTP verb, so only those fields provided in the account object will be updated, and those fields not provided will be left aloneUpdating an account with a specified ACCOUNTID that does not exist will result in an error response.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the account to update in the CRM system.
     * @param {module:model/Account} body The account object, with those fields that are to be updated.
     * @param {module:api/ZohocrmApi~updateAccountByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Account}
     */
    this.updateAccountById = function(authorization, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling updateAccountById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateAccountById";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling updateAccountById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Account;

      return this.apiClient.callApi(
        '/accounts/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountsNoteByNoteId operation.
     * @callback module:api/ZohocrmApi~updateAccountsNoteByNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a note for an account
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} accountId The account ID
     * @param {String} noteId The note ID
     * @param {module:model/NotesPOST} notes The note
     * @param {module:api/ZohocrmApi~updateAccountsNoteByNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Notes}
     */
    this.updateAccountsNoteByNoteId = function(authorization, accountId, noteId, notes, callback) {
      var postBody = notes;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling updateAccountsNoteByNoteId";
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw "Missing the required parameter 'accountId' when calling updateAccountsNoteByNoteId";
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw "Missing the required parameter 'noteId' when calling updateAccountsNoteByNoteId";
      }

      // verify the required parameter 'notes' is set
      if (notes == undefined || notes == null) {
        throw "Missing the required parameter 'notes' when calling updateAccountsNoteByNoteId";
      }


      var pathParams = {
        'accountId': accountId,
        'noteId': noteId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Notes;

      return this.apiClient.callApi(
        '/accounts/{accountId}/notes/{noteId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateActivitiesCallByCallId operation.
     * @callback module:api/ZohocrmApi~updateActivitiesCallByCallIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Calls} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a call
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} callId The call ID
     * @param {module:model/Calls} calls The call
     * @param {module:api/ZohocrmApi~updateActivitiesCallByCallIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Calls}
     */
    this.updateActivitiesCallByCallId = function(authorization, callId, calls, callback) {
      var postBody = calls;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling updateActivitiesCallByCallId";
      }

      // verify the required parameter 'callId' is set
      if (callId == undefined || callId == null) {
        throw "Missing the required parameter 'callId' when calling updateActivitiesCallByCallId";
      }

      // verify the required parameter 'calls' is set
      if (calls == undefined || calls == null) {
        throw "Missing the required parameter 'calls' when calling updateActivitiesCallByCallId";
      }


      var pathParams = {
        'callId': callId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Calls;

      return this.apiClient.callApi(
        '/activities-calls/{callId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateActivitiesEventByEventId operation.
     * @callback module:api/ZohocrmApi~updateActivitiesEventByEventIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Events} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an event
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} eventId The event ID
     * @param {module:model/Events} events The event
     * @param {module:api/ZohocrmApi~updateActivitiesEventByEventIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Events}
     */
    this.updateActivitiesEventByEventId = function(authorization, eventId, events, callback) {
      var postBody = events;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling updateActivitiesEventByEventId";
      }

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw "Missing the required parameter 'eventId' when calling updateActivitiesEventByEventId";
      }

      // verify the required parameter 'events' is set
      if (events == undefined || events == null) {
        throw "Missing the required parameter 'events' when calling updateActivitiesEventByEventId";
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Events;

      return this.apiClient.callApi(
        '/activities-events/{eventId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateById operation.
     * @callback module:api/ZohocrmApi~updateByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an object associated with a given object name and ID in the CRM system. The update API uses the PATCH HTTP verb, so only those fields provided in the object will be updated, and those fields not provided will be left alone.Updating an object with a specified ID that does not exist will result in an error response.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} objectName The object name of the object to be updated, e.g., &#39;account&#39;.
     * @param {String} id The ID of the object to update in the CRM system.
     * @param {Object} body The object with those fields that are to be updated.
     * @param {module:api/ZohocrmApi~updateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Object}
     */
    this.updateById = function(authorization, objectName, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling updateById";
      }

      // verify the required parameter 'objectName' is set
      if (objectName == undefined || objectName == null) {
        throw "Missing the required parameter 'objectName' when calling updateById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateById";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling updateById";
      }


      var pathParams = {
        'objectName': objectName,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi(
        '/{objectName}/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaignById operation.
     * @callback module:api/ZohocrmApi~updateCampaignByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the contact associated with the given CAMPAIGNID in the CRM system. The update API uses the PATCH HTTP verb, so only those fields provided in the contact object will be updated, and those fields not provided will be left aloneUpdating a contact with a specified CAMPAIGNID that does not exist will result in an error response.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the contact to update in the CRM system.
     * @param {module:model/Campaign} body The contact object, with those fields that are to be updated.
     * @param {module:api/ZohocrmApi~updateCampaignByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Campaign}
     */
    this.updateCampaignById = function(authorization, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling updateCampaignById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateCampaignById";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling updateCampaignById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Campaign;

      return this.apiClient.callApi(
        '/campaigns/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactById operation.
     * @callback module:api/ZohocrmApi~updateContactByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the contact associated with the given CONTACTID in the CRM system. The update API uses the PATCH HTTP verb, so only those fields provided in the contact object will be updated, and those fields not provided will be left aloneUpdating a contact with a specified CONTACTID that does not exist will result in an error response.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the contact to update in the CRM system.
     * @param {module:model/Contact} body The contact object, with those fields that are to be updated.
     * @param {module:api/ZohocrmApi~updateContactByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Contact}
     */
    this.updateContactById = function(authorization, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling updateContactById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateContactById";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling updateContactById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Contact;

      return this.apiClient.callApi(
        '/contacts/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactsNoteByNoteId operation.
     * @callback module:api/ZohocrmApi~updateContactsNoteByNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a note for a contact
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} contactId The contact ID
     * @param {String} noteId The note ID
     * @param {module:model/NotesPOST} notes The note
     * @param {module:api/ZohocrmApi~updateContactsNoteByNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Notes}
     */
    this.updateContactsNoteByNoteId = function(authorization, contactId, noteId, notes, callback) {
      var postBody = notes;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling updateContactsNoteByNoteId";
      }

      // verify the required parameter 'contactId' is set
      if (contactId == undefined || contactId == null) {
        throw "Missing the required parameter 'contactId' when calling updateContactsNoteByNoteId";
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw "Missing the required parameter 'noteId' when calling updateContactsNoteByNoteId";
      }

      // verify the required parameter 'notes' is set
      if (notes == undefined || notes == null) {
        throw "Missing the required parameter 'notes' when calling updateContactsNoteByNoteId";
      }


      var pathParams = {
        'contactId': contactId,
        'noteId': noteId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Notes;

      return this.apiClient.callApi(
        '/contacts/{contactId}/notes/{noteId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLeadById operation.
     * @callback module:api/ZohocrmApi~updateLeadByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Lead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a lead associated with the given LEADID in the CRM system. The update API uses the PATCH HTTP verb, so only those fields provided in the lead object will be updated, and those fields not provided will be left alone.Updating a lead with a specified LEADID that does not exist will result in an error response.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the lead to update in the CRM system.
     * @param {module:model/Lead} body The lead object, with those fields that are to be updated.
     * @param {module:api/ZohocrmApi~updateLeadByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Lead}
     */
    this.updateLeadById = function(authorization, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling updateLeadById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateLeadById";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling updateLeadById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Lead;

      return this.apiClient.callApi(
        '/leads/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLeadsNoteByNoteId operation.
     * @callback module:api/ZohocrmApi~updateLeadsNoteByNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a note for a lead
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} leadId The lead ID
     * @param {String} noteId The note ID
     * @param {module:model/NotesPOST} notes The note
     * @param {module:api/ZohocrmApi~updateLeadsNoteByNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Notes}
     */
    this.updateLeadsNoteByNoteId = function(authorization, leadId, noteId, notes, callback) {
      var postBody = notes;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling updateLeadsNoteByNoteId";
      }

      // verify the required parameter 'leadId' is set
      if (leadId == undefined || leadId == null) {
        throw "Missing the required parameter 'leadId' when calling updateLeadsNoteByNoteId";
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw "Missing the required parameter 'noteId' when calling updateLeadsNoteByNoteId";
      }

      // verify the required parameter 'notes' is set
      if (notes == undefined || notes == null) {
        throw "Missing the required parameter 'notes' when calling updateLeadsNoteByNoteId";
      }


      var pathParams = {
        'leadId': leadId,
        'noteId': noteId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Notes;

      return this.apiClient.callApi(
        '/leads/{leadId}/notes/{noteId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOpportunitById operation.
     * @callback module:api/ZohocrmApi~updateOpportunitByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Opportunity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the opportunity associated with the given POTENTIALID in the CRM system. The update API uses the PATCH HTTP verb, so only those fields provided in the opportunity object will be updated, and those fields not provided will be left alone.Updating an opportunity with a specified POTENTIALID that does not exist will result in an error response.
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} id The ID of the opportunity to update in the CRM system.
     * @param {module:model/Opportunity} body The opportunity object, with those fields that are to be updated.
     * @param {module:api/ZohocrmApi~updateOpportunitByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Opportunity}
     */
    this.updateOpportunitById = function(authorization, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling updateOpportunitById";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateOpportunitById";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling updateOpportunitById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Opportunity;

      return this.apiClient.callApi(
        '/opportunities/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOpportunitiesNoteByNoteId operation.
     * @callback module:api/ZohocrmApi~updateOpportunitiesNoteByNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a note for an opportunity
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} opportunityId The opportunity ID
     * @param {String} noteId The note ID
     * @param {module:model/NotesPOST} notes The note
     * @param {module:api/ZohocrmApi~updateOpportunitiesNoteByNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Notes}
     */
    this.updateOpportunitiesNoteByNoteId = function(authorization, opportunityId, noteId, notes, callback) {
      var postBody = notes;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling updateOpportunitiesNoteByNoteId";
      }

      // verify the required parameter 'opportunityId' is set
      if (opportunityId == undefined || opportunityId == null) {
        throw "Missing the required parameter 'opportunityId' when calling updateOpportunitiesNoteByNoteId";
      }

      // verify the required parameter 'noteId' is set
      if (noteId == undefined || noteId == null) {
        throw "Missing the required parameter 'noteId' when calling updateOpportunitiesNoteByNoteId";
      }

      // verify the required parameter 'notes' is set
      if (notes == undefined || notes == null) {
        throw "Missing the required parameter 'notes' when calling updateOpportunitiesNoteByNoteId";
      }


      var pathParams = {
        'opportunityId': opportunityId,
        'noteId': noteId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Notes;

      return this.apiClient.callApi(
        '/opportunities/{opportunityId}/notes/{noteId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskByTaskId operation.
     * @callback module:api/ZohocrmApi~updateTaskByTaskIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tasks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a task
     * @param {String} authorization The authorization tokens. The format for the header value is &#39;Element &amp;lt;token&amp;gt;, User &amp;lt;user secret&amp;gt;&#39;
     * @param {String} taskId The task ID
     * @param {module:model/Tasks} tasks The task
     * @param {module:api/ZohocrmApi~updateTaskByTaskIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Tasks}
     */
    this.updateTaskByTaskId = function(authorization, taskId, tasks, callback) {
      var postBody = tasks;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling updateTaskByTaskId";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling updateTaskByTaskId";
      }

      // verify the required parameter 'tasks' is set
      if (tasks == undefined || tasks == null) {
        throw "Missing the required parameter 'tasks' when calling updateTaskByTaskId";
      }


      var pathParams = {
        'taskId': taskId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Tasks;

      return this.apiClient.callApi(
        '/tasks/{taskId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
